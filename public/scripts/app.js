(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

// OBJECT FOR HOLDING EVERYTHING - NAMESPACING
var app = {};

// ARRAY TO HOLD JUST COUNTRY NAMES & CAPITALS
app.countries = [];

// ARRAY TO HOLD COUNTRIES ALREADY ASKED AFTER REMOVING THEM FROM ORIGINAL ARRAY
app.usedCountries = [];

// ARRAY TO HOLD COUNTRIES THAT THE USER GOT WRONG
app.wrongAnswers = [];

// ARRAY TO HOLD COUNTRIES THAT THE USER GOT RIGHT
app.score = [];

// FUNCTION TO RETRIEVE INFORMATION FROM API
app.locations = function () {
    $.ajax({
        url: 'https://restcountries.eu/rest/v2/all',
        method: 'GET',
        dataType: 'json'
    }).then(function (results) {
        app.countryInfo(results);
    });
};

// FUNCTION TO FILTER OUT ANY COUNTRIES THAT DON'T HAVE REQUIRED INFO AND PUSH RESULTS TO NEW ARRAY TO WORK FROM
app.countryInfo = function (countryArray) {
    countryArray.forEach(function (country) {
        if (country.name && country.capital) {
            app.countries.push({
                name: country.name,
                capital: country.capital
            });
        };
    });
};

// FUNCTION TO GET RANDOM COUNTRY TO USE FOR EACH QUESTION
app.randomizer = function () {
    var random = Math.floor(Math.random() * app.countries.length);
    return app.countries[random];
};

// FUNCTION TO GET RANDOM NUMBER FOR POPULATING POTENTIAL ANSWERS
app.getRandomNumber = function (number) {
    return Math.floor(Math.random() * number);
};

// FUNCTION TO GET POTENTIAL ANSWERS INCLUDING THE CORRECT ONE AND POPULATE THE RANDOM COUNTRY AND ANSWERS ON THE PAGE
// SPLICE AND PUSH USED COUNTRIES TO SEPARATE ARRAY
app.getAnswers = function () {
    var answers = [];
    for (var i = 0; i < 4; i++) {
        answers.push(app.randomizer());
    };
    var randomNumber = app.getRandomNumber(4);
    app.correctAnswer = answers[randomNumber];
    $('.answerOne').text(answers[0].capital);
    $('.answerTwo').text(answers[1].capital);
    $('.answerThree').text(answers[2].capital);
    $('.answerFour').text(answers[3].capital);
    $('.country').text(app.correctAnswer.name);
    for (var _i = 0; _i < app.countries.length; _i++) {
        if (app.countries[_i].name === app.correctAnswer.name) {
            app.usedCountries.push(app.countries.splice(_i, 1)[0]);
        };
    };
    return app.correctAnswer;
};

// FUNCTION FOR LISTENERS -
// HIDE THE INTRO PAGE ON CLICK OF THE START BUTTON
// START COUNTDOWN
// WHEN COUNTDOWN REACHES ZERO, HIDE MAIN SECTION TO SHOW RESULTS PAGE WITH DYNAMICALLY POPULATED RESULTS
app.events = function () {
    $('.startButton').on('click', function () {
        $('.gameLoad').addClass('hide');
        $('main').removeClass('hide');
        var counter = 60;
        $('.clock').append('<p class="countDown">' + counter + '</p>');
        setInterval(function () {
            counter--;
            if (counter >= 0) {
                $('.countDown').text('' + counter);
            };
            if (counter === 0) {
                $('.finalResult').removeClass('hide');
                $('main').addClass('hide');
                app.score.forEach(function (rightCountry) {
                    $('.rightAnswers').append('<h2>' + rightCountry.name + '</h2><h3>' + rightCountry.capital + '</h3>');
                });
                app.wrongAnswers.forEach(function (wrongCountry) {
                    $('.wrongAnswers').append('<h2>' + wrongCountry.name + '</h2><h3>' + wrongCountry.capital + '</h3>');
                });
            };
        }, 1000);
        app.getAnswers();
    });
    // LISTENER FOR CLICKED ANSWER TO FIGURE OUT IF RIGHT ANSWER WAS CLICKED
    // IF RIGHT ANSWER IS CLICKED, PUSH TO SCORE ARRAY
    // DYNAMICALLY POPULATE SCORE ON THE PAGE
    // IF WRONG ANSWER IS CLICKED, PUSH TO WRONG ANSWER ARRAY
    $('.actionButton').on('click', function (e) {
        e.preventDefault();
        var clickedAnswer = $(this).text();
        var correctAnswer = app.correctAnswer;
        if (clickedAnswer === correctAnswer.capital) {
            app.score.push(correctAnswer);
        } else {
            app.wrongAnswers.push(correctAnswer);
        };
        app.getAnswers();
        $('.score').text(app.score.length);
    });
};

// FUNCTION FOR INITIALIZING THE GAME
app.init = function () {
    app.events();
    app.locations();
};

// DOCUMENT READY FOR CALLING THE INIT FUNCTION
$(function () {
    app.init();
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZXYvc2NyaXB0cy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBO0FBQ0EsSUFBTSxNQUFNLEVBQVo7O0FBRUE7QUFDQSxJQUFJLFNBQUosR0FBZ0IsRUFBaEI7O0FBRUE7QUFDQSxJQUFJLGFBQUosR0FBb0IsRUFBcEI7O0FBRUE7QUFDQSxJQUFJLFlBQUosR0FBbUIsRUFBbkI7O0FBRUE7QUFDQSxJQUFJLEtBQUosR0FBWSxFQUFaOztBQUVBO0FBQ0EsSUFBSSxTQUFKLEdBQWdCLFlBQVU7QUFDdEIsTUFBRSxJQUFGLENBQU87QUFDSCxtREFERztBQUVILGdCQUFRLEtBRkw7QUFHSCxrQkFBVTtBQUhQLEtBQVAsRUFJRyxJQUpILENBSVEsVUFBQyxPQUFELEVBQWE7QUFDakIsWUFBSSxXQUFKLENBQWdCLE9BQWhCO0FBQ0gsS0FORDtBQU9ILENBUkQ7O0FBVUE7QUFDQSxJQUFJLFdBQUosR0FBa0IsVUFBUyxZQUFULEVBQXNCO0FBQ3BDLGlCQUFhLE9BQWIsQ0FBcUIsVUFBUyxPQUFULEVBQWlCO0FBQ2xDLFlBQUksUUFBUSxJQUFSLElBQWdCLFFBQVEsT0FBNUIsRUFBb0M7QUFDaEMsZ0JBQUksU0FBSixDQUFjLElBQWQsQ0FBbUI7QUFDZixzQkFBTSxRQUFRLElBREM7QUFFZix5QkFBUyxRQUFRO0FBRkYsYUFBbkI7QUFJSDtBQUNKLEtBUEQ7QUFRSCxDQVREOztBQVdBO0FBQ0EsSUFBSSxVQUFKLEdBQWlCLFlBQVU7QUFDdkIsUUFBTSxTQUFTLEtBQUssS0FBTCxDQUFXLEtBQUssTUFBTCxLQUFnQixJQUFJLFNBQUosQ0FBYyxNQUF6QyxDQUFmO0FBQ0EsV0FBTyxJQUFJLFNBQUosQ0FBYyxNQUFkLENBQVA7QUFDSCxDQUhEOztBQUtBO0FBQ0EsSUFBSSxlQUFKLEdBQXNCLFVBQVMsTUFBVCxFQUFnQjtBQUNsQyxXQUFPLEtBQUssS0FBTCxDQUFX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YUFBZjtBQUNILFNBRkQsTUFFSztBQUNELGdCQUFJLFlBQUosQ0FBaUIsSUFBakIsQ0FBc0IsYUFBdEI7QUFDSDtBQUNELFlBQUksVUFBSjtBQUNBLFVBQUUsUUFBRixFQUFZLElBQVosQ0FBaUIsSUFBSSxLQUFKLENBQVUsTUFBM0I7QUFDSCxLQVhEO0FBWUgsQ0F4Q0Q7O0FBMENBO0FBQ0EsSUFBSSxJQUFKLEdBQVcsWUFBVTtBQUNqQixRQUFJLE1BQUo7QUFDQSxRQUFJLFNBQUo7QUFDSCxDQUhEOztBQUtBO0FBQ0EsRUFBRSxZQUFVO0FBQ1IsUUFBSSxJQUFKO0FBQ0gsQ0FGRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vIE9CSkVDVCBGT1IgSE9MRElORyBFVkVSWVRISU5HIC0gTkFNRVNQQUNJTkdcbmNvbnN0IGFwcCA9IHt9O1xuXG4vLyBBUlJBWSBUTyBIT0xEIEpVU1QgQ09VTlRSWSBOQU1FUyAmIENBUElUQUxTXG5hcHAuY291bnRyaWVzID0gW107XG5cbi8vIEFSUkFZIFRPIEhPTEQgQ09VTlRSSUVTIEFMUkVBRFkgQVNLRUQgQUZURVIgUkVNT1ZJTkcgVEhFTSBGUk9NIE9SSUdJTkFMIEFSUkFZXG5hcHAudXNlZENvdW50cmllcyA9IFtdO1xuXG4vLyBBUlJBWSBUTyBIT0xEIENPVU5UUklFUyBUSEFUIFRIRSBVU0VSIEdPVCBXUk9OR1xuYXBwLndyb25nQW5zd2VycyA9IFtdO1xuXG4vLyBBUlJBWSBUTyBIT0xEIENPVU5UUklFUyBUSEFUIFRIRSBVU0VSIEdPVCBSSUdIVFxuYXBwLnNjb3JlID0gW107XG5cbi8vIEZVTkNUSU9OIFRPIFJFVFJJRVZFIElORk9STUFUSU9OIEZST00gQVBJXG5hcHAubG9jYXRpb25zID0gZnVuY3Rpb24oKXtcbiAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6IGBodHRwczovL3Jlc3Rjb3VudHJpZXMuZXUvcmVzdC92Mi9hbGxgLFxuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgfSkudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICBhcHAuY291bnRyeUluZm8ocmVzdWx0cyk7XG4gICAgfSk7XG59O1xuXG4vLyBGVU5DVElPTiBUTyBGSUxURVIgT1VUIEFOWSBDT1VOVFJJRVMgVEhBVCBET04nVCBIQVZFIFJFUVVJUkVEIElORk8gQU5EIFBVU0ggUkVTVUxUUyBUTyBORVcgQVJSQVkgVE8gV09SSyBGUk9NXG5hcHAuY291bnRyeUluZm8gPSBmdW5jdGlvbihjb3VudHJ5QXJyYXkpe1xuICAgIGNvdW50cnlBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKGNvdW50cnkpe1xuICAgICAgICBpZiAoY291bnRyeS5uYW1lICYmIGNvdW50cnkuY2FwaXRhbCl7XG4gICAgICAgICAgICBhcHAuY291bnRyaWVzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IGNvdW50cnkubmFtZSxcbiAgICAgICAgICAgICAgICBjYXBpdGFsOiBjb3VudHJ5LmNhcGl0YWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn07XG5cbi8vIEZVTkNUSU9OIFRPIEdFVCBSQU5ET00gQ09VTlRSWSBUTyBVU0UgRk9SIEVBQ0ggUVVFU1RJT05cbmFwcC5yYW5kb21pemVyID0gZnVuY3Rpb24oKXtcbiAgICBjb25zdCByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcHAuY291bnRyaWVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIGFwcC5jb3VudHJpZXNbcmFuZG9tXTtcbn07XG5cbi8vIEZVTkNUSU9OIFRPIEdFVCBSQU5ET00gTlVNQkVSIEZPUiBQT1BVTEFUSU5HIFBPVEVOVElBTCBBTlNXRVJTXG5hcHAuZ2V0UmFuZG9tTnVtYmVyID0gZnVuY3Rpb24obnVtYmVyKXsgXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG51bWJlcik7XG59O1xuXG4vLyBGVU5DVElPTiBUTyBHRVQgUE9URU5USUFMIEFOU1dFUlMgSU5DTFVESU5HIFRIRSBDT1JSRUNUIE9ORSBBTkQgUE9QVUxBVEUgVEhFIFJBTkRPTSBDT1VOVFJZIEFORCBBTlNXRVJTIE9OIFRIRSBQQUdFXG4vLyBTUExJQ0UgQU5EIFBVU0ggVVNFRCBDT1VOVFJJRVMgVE8gU0VQQVJBVEUgQVJSQVlcbmFwcC5nZXRBbnN3ZXJzID0gZnVuY3Rpb24oKXtcbiAgICBsZXQgYW5zd2VycyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKXtcbiAgICAgICAgYW5zd2Vycy5wdXNoKGFwcC5yYW5kb21pemVyKCkpO1xuICAgIH07XG4gICAgY29uc3QgcmFuZG9tTnVtYmVyID0gYXBwLmdldFJhbmRvbU51bWJlcig0KTtcbiAgICBhcHAuY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbcmFuZG9tTnVtYmVyXTtcbiAgICAkKCcuYW5zd2VyT25lJykudGV4dChhbnN3ZXJzWzBdLmNhcGl0YWwpO1xuICAgICQoJy5hbnN3ZXJUd28nKS50ZXh0KGFuc3dlcnNbMV0uY2FwaXRhbCk7XG4gICAgJCgnLmFuc3dlclRocmVlJykudGV4dChhbnN3ZXJzWzJdLmNhcGl0YWwpO1xuICAgICQoJy5hbnN3ZXJGb3VyJykudGV4dChhbnN3ZXJzWzNdLmNhcGl0YWwpO1xuICAgICQoJy5jb3VudHJ5JykudGV4dChhcHAuY29ycmVjdEFuc3dlci5uYW1lKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgYXBwLmNvdW50cmllcy5sZW5ndGg7IGkrKyApe1xuICAgICAgICBpZiAoYXBwLmNvdW50cmllc1tpXS5uYW1lID09PSBhcHAuY29ycmVjdEFuc3dlci5uYW1lKSB7XG4gICAgICAgICAgICBhcHAudXNlZENvdW50cmllcy5wdXNoKGFwcC5jb3VudHJpZXMuc3BsaWNlKGksIDEpWzBdKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcHAuY29ycmVjdEFuc3dlcjtcbn07XG5cbi8vIEZVTkNUSU9OIEZPUiBMSVNURU5FUlMgLVxuLy8gSElERSBUSEUgSU5UUk8gUEFHRSBPTiBDTElDSyBPRiBUSEUgU1RBUlQgQlVUVE9OXG4vLyBTVEFSVCBDT1VOVERPV05cbi8vIFdIRU4gQ09VTlRET1dOIFJFQUNIRVMgWkVSTywgSElERSBNQUlOIFNFQ1RJT04gVE8gU0hPVyBSRVNVTFRTIFBBR0UgV0lUSCBEWU5BTUlDQUxMWSBQT1BVTEFURUQgUkVTVUxUU1xuYXBwLmV2ZW50cyA9IGZ1bmN0aW9uKCl7XG4gICAgJCgnLnN0YXJ0QnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgJCgnLmdhbWVMb2FkJykuYWRkQ2xhc3MoJ2hpZGUnKTtcbiAgICAgICAgJCgnbWFpbicpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4gICAgICAgIGxldCBjb3VudGVyID0gNjA7XG4gICAgICAgICQoJy5jbG9jaycpLmFwcGVuZChgPHAgY2xhc3M9XCJjb3VudERvd25cIj4ke2NvdW50ZXJ9PC9wPmApO1xuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgY291bnRlci0tO1xuICAgICAgICAgICAgaWYoY291bnRlciA+PSAwKXtcbiAgICAgICAgICAgICAgICAkKCcuY291bnREb3duJykudGV4dChgJHtjb3VudGVyfWApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmKGNvdW50ZXIgPT09IDApe1xuICAgICAgICAgICAgICAgICQoJy5maW5hbFJlc3VsdCcpLnJlbW92ZUNsYXNzKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgJCgnbWFpbicpLmFkZENsYXNzKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgYXBwLnNjb3JlLmZvckVhY2goZnVuY3Rpb24gKHJpZ2h0Q291bnRyeSl7XG4gICAgICAgICAgICAgICAgICAgICQoJy5yaWdodEFuc3dlcnMnKS5hcHBlbmQoYDxoMj4ke3JpZ2h0Q291bnRyeS5uYW1lfTwvaDI+PGgzPiR7cmlnaHRDb3VudHJ5LmNhcGl0YWx9PC9oMz5gKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhcHAud3JvbmdBbnN3ZXJzLmZvckVhY2goZnVuY3Rpb24gKHdyb25nQ291bnRyeSl7XG4gICAgICAgICAgICAgICAgICAgICQoJy53cm9uZ0Fuc3dlcnMnKS5hcHBlbmQoYDxoMj4ke3dyb25nQ291bnRyeS5uYW1lfTwvaDI+PGgzPiR7d3JvbmdDb3VudHJ5LmNhcGl0YWx9PC9oMz5gKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sMTAwMCk7XG4gICAgICAgIGFwcC5nZXRBbnN3ZXJzKCk7XG4gICAgfSk7XG4gICAgLy8gTElTVEVORVIgRk9SIENMSUNLRUQgQU5TV0VSIFRPIEZJR1VSRSBPVVQgSUYgUklHSFQgQU5TV0VSIFdBUyBDTElDS0VEXG4gICAgLy8gSUYgUklHSFQgQU5TV0VSIElTIENMSUNLRUQsIFBVU0ggVE8gU0NPUkUgQVJSQVlcbiAgICAvLyBEWU5BTUlDQUxMWSBQT1BVTEFURSBTQ09SRSBPTiBUSEUgUEFHRVxuICAgIC8vIElGIFdST05HIEFOU1dFUiBJUyBDTElDS0VELCBQVVNIIFRPIFdST05HIEFOU1dFUiBBUlJBWVxuICAgICQoJy5hY3Rpb25CdXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgY2xpY2tlZEFuc3dlciA9ICQodGhpcykudGV4dCgpO1xuICAgICAgICBjb25zdCBjb3JyZWN0QW5zd2VyID0gYXBwLmNvcnJlY3RBbnN3ZXI7XG4gICAgICAgIGlmKGNsaWNrZWRBbnN3ZXIgPT09IGNvcnJlY3RBbnN3ZXIuY2FwaXRhbCl7XG4gICAgICAgICAgICBhcHAuc2NvcmUucHVzaChjb3JyZWN0QW5zd2VyKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBhcHAud3JvbmdBbnN3ZXJzLnB1c2goY29ycmVjdEFuc3dlcik7XG4gICAgICAgIH07XG4gICAgICAgIGFwcC5nZXRBbnN3ZXJzKCk7XG4gICAgICAgICQoJy5zY29yZScpLnRleHQoYXBwLnNjb3JlLmxlbmd0aCk7XG4gICAgfSk7XG59O1xuXG4vLyBGVU5DVElPTiBGT1IgSU5JVElBTElaSU5HIFRIRSBHQU1FXG5hcHAuaW5pdCA9IGZ1bmN0aW9uKCl7XG4gICAgYXBwLmV2ZW50cygpO1xuICAgIGFwcC5sb2NhdGlvbnMoKTtcbn07XG5cbi8vIERPQ1VNRU5UIFJFQURZIEZPUiBDQUxMSU5HIFRIRSBJTklUIEZVTkNUSU9OXG4kKGZ1bmN0aW9uKCl7XG4gICAgYXBwLmluaXQoKTtcbn0pOyJdfQ==
